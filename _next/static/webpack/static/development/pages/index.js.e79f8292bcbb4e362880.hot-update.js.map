{"version":3,"file":"static/webpack/static/development/pages/index.js.e79f8292bcbb4e362880.hot-update.js","sources":["webpack:///./components/story/stories.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useContext } from 'react';\nimport { ProjectionRoom } from './projectionRoom';\nimport { MainBody } from './mainBody';\nimport { ProgressSetterRef } from '../types';\nimport { config } from './config';\nimport { FloatCard } from './floatCard/floatCard';\nimport { AppContext } from '../appContext';\nimport ReactGA from 'react-ga';\n\nconst {\n  stories,\n  design: { topBoundary, bottomBoundary, berthLine },\n} = config;\n\nconst getBerthLineProgress = (h: number) =>\n  ((bottomBoundary + 1 - berthLine) * window.innerHeight) /\n  ((bottomBoundary + 1 - topBoundary) * window.innerHeight + h);\n\nexport const Stories: React.FC = () => {\n  const { cursorSetterRef } = useContext(AppContext);\n  const tickingRef = useRef(false);\n\n  const storiesContainerRef = useRef<HTMLDivElement>(null);\n  // const [story, set] = useState({\n  //   index: 0,\n  //   berthLineProgress: undefined,\n  // });\n  // const { index, berthLineProgress, costarBerthLineProgress } = story;\n  const [index, set] = useState<number>(undefined);\n  const berthLineProgressRef = useRef(0);\n\n  // Manage state of projection rooms.\n  const roomProgressSetterRef: ProgressSetterRef = useRef(null);\n  // const cardsProgressSetterRef: ProgressSetterRef = useRef(null);\n  const curCardProgressSetterRef: ProgressSetterRef = useRef(null);\n  const preCardProgressSetterRef: ProgressSetterRef = useRef(null);\n\n  useEffect(() => {\n    const storyNodes = storiesContainerRef.current.childNodes;\n    const updateIndex = (newIndex: number) => {\n      berthLineProgressRef.current = getBerthLineProgress(\n        (storyNodes[newIndex] as HTMLElement).offsetHeight\n      );\n      set(newIndex);\n    };\n\n    if (index === undefined) {\n      updateIndex(\n        Array.from(storyNodes).findIndex((node) => {\n          const storyEl = node as HTMLElement;\n          return (\n            storyEl.offsetTop + storyEl.offsetHeight - window.scrollY >=\n            window.innerHeight * topBoundary\n          );\n        })\n      );\n    } else {\n      // GA\n      ReactGA.event({\n        category: 'Browse',\n        action: `User is browsing story ${index + 1}.`,\n      });\n\n      // ClientY off critical lines.\n      const topBoundaryClientY = window.innerHeight * topBoundary;\n      const bottomBoundaryClientY = window.innerHeight * (bottomBoundary + 1);\n\n      // Tar element.\n      const el = storyNodes[index] as HTMLElement;\n\n      // Total distance.\n      const s = bottomBoundaryClientY - topBoundaryClientY + el.offsetHeight;\n\n      const updateProgress = () => {\n        let newIndex;\n\n        // Past distance.\n        const elClientY = el.offsetTop - window.scrollY;\n        const past = bottomBoundaryClientY - elClientY;\n\n        // Calculate progress.\n        let progress = past / s;\n\n        // Should the story be changed?\n        if (progress < 0) {\n          if (index > 0) {\n            progress = 1 - progress;\n            newIndex = index - 1;\n          } else progress = 0;\n        } else if (progress >= 1 && index < storyNodes.length - 1) {\n          progress = progress - 1;\n          newIndex = index + 1;\n        }\n\n        if (newIndex !== undefined) {\n          berthLineProgressRef.current = getBerthLineProgress(\n            (storyNodes[newIndex] as HTMLElement).offsetHeight\n          );\n          set(newIndex);\n        } else {\n          // Use progress to update projection rooms.\n          roomProgressSetterRef.current(progress);\n          // cardsProgressSetterRef.current(progress);\n          curCardProgressSetterRef.current(progress);\n          if (index > 0) preCardProgressSetterRef.current(progress);\n        }\n\n        tickingRef.current = false;\n      };\n\n      const handleScroll = () => {\n        if (!tickingRef.current) {\n          tickingRef.current = true;\n          window.requestAnimationFrame(updateProgress);\n        }\n      };\n      updateProgress();\n      // Attach listener.\n      window.addEventListener('scroll', handleScroll);\n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      };\n    }\n\n    // Initialize progress.\n    // if (!initializedRef.current) {\n    //   updateProgress();\n    //   initializedRef.current = true;\n    // }\n  }, [index]);\n\n  return (\n    <>\n      <div\n        ref={storiesContainerRef}\n        className=\"relative z-mid\"\n        style={{\n          paddingTop: `${(1 + bottomBoundary) * 100}vh`,\n          paddingBottom: '50vh',\n          marginLeft: '50vw',\n          marginRight: '120px',\n        }}\n      >\n        {stories.map((c, i) => (\n          <MainBody key={i} {...c.mainBody} />\n        ))}\n      </div>\n      {index !== undefined && (\n        <>\n          {index > 0 && <ProjectionRoom key={`room-${index - 1}`} index={index - 1} />}\n          <ProjectionRoom\n            key={`room-${index}`}\n            index={index}\n            berthLineProgress={berthLineProgressRef.current}\n            cursorSetterRef={cursorSetterRef}\n            progressSetterRef={roomProgressSetterRef}\n          />\n          {stories.map((s, i) => (\n            <FloatCard\n              key={`card-${i}`}\n              progressSetterRef={\n                i === index\n                  ? curCardProgressSetterRef\n                  : i === index - 1\n                  ? preCardProgressSetterRef\n                  : null\n              }\n              index={i}\n              costar={i === index - 1}\n              mainBodyHeight={\n                (storiesContainerRef.current.childNodes[i] as HTMLElement).offsetHeight\n              }\n            />\n          ))}\n        </>\n      )}\n      {/* <FloatCards\n        berthLineProgress={berthLineProgress}\n        costarBerthLineProgress={costarBerthLineProgress}\n        progressSetterRef={cardsProgressSetterRef}\n        storyIndex={index}\n      /> */}\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAJA;AACA;AAMA;AACA;AAEA;AACA;AAHA;AADA;AAWA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AACA;AAoCA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AAlFA;AAwFA;AACA;AACA;AACA;AACA;AA5FA;AA8FA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAUA;AACA;AAAA;AAZA;AAiBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAOA;AACA;AACA;AAXA;AA3BA;AAjHA;;;;A","sourceRoot":""}