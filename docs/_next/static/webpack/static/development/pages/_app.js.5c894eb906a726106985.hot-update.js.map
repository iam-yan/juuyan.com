{"version":3,"file":"static/webpack/static/development/pages/_app.js.5c894eb906a726106985.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { AppProps } from 'next/app';\nimport ReactGA from 'react-ga';\nimport '../styles/tailwind.css';\nimport { IconConfig } from '@juuyan.org/ui';\nimport { icons } from '../styles/icons';\nimport { Cursor, Loading, Header, CursorSetter, AppContext } from '../components';\nimport { useSpring, config } from 'react-spring';\nimport { useDetectTouchScreen } from '@juuyan.org/utility';\nimport classNames from 'classnames';\n\nReactGA.initialize('UA-167143117-2');\n\nexport default ({ Component, pageProps }: AppProps) => {\n  const [isTouchScreen, setIsTouchScreen] = useState(undefined);\n  const [loaded, setLoaded] = useState(false);\n  const [scroll, setScroll] = useSpring(() => ({\n    config: config.stiff,\n    y: 0,\n    onChange: (y) => {\n      window.scroll(0, y);\n    },\n  }));\n\n  const cursorCoordRef = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n  const cursorSetterRef = useRef<CursorSetter>((x, y) => {\n    cursorCoordRef.current = { x, y };\n  });\n  useDetectTouchScreen((isTS) => {\n    setIsTouchScreen(isTS);\n  });\n\n  useEffect(() => {\n    if (loaded) {\n      setScroll({ y: window.innerHeight * 0.8 });\n    }\n  }, [loaded]);\n\n  return (\n    <>\n      <Loading onAssetsLoad={() => setLoaded(true)} />\n      {isTouchScreen === false && (\n        <Cursor cursorSetterRef={cursorSetterRef} cursorCoordRef={cursorCoordRef} />\n      )}\n      {isTouchScreen !== undefined && (\n        <AppContext.Provider\n          value={{\n            cursorCoordRef,\n            cursorSetterRef,\n          }}\n        >\n          <IconConfig.Provider value={icons}>\n            {loaded && <Header />}\n            <div className={classNames(!loaded && 'fixed inset-0 overflow-hidden')}>\n              <Component {...pageProps} />\n            </div>\n          </IconConfig.Provider>\n        </AppContext.Provider>\n      )}\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAEA;AAAA;AAxCA;;;;A","sourceRoot":""}